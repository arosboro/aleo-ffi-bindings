/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_ALEO_FFI_BINDINGS__
#define __RUST_ALEO_FFI_BINDINGS__

#ifdef __cplusplus
extern "C" {
#endif

typedef struct PrivateKey PrivateKey_t;

typedef struct Address Address_t;

Address_t * address_from_private_key (
    PrivateKey_t * const * private_key);

typedef struct ViewKey ViewKey_t;

Address_t * address_from_view_key (
    ViewKey_t * const * view_key);

Address_t * address_from_string (
    char const * address);

char * address_to_string (
    Address_t const * address);


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  `&'lt [T]` but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct slice_ref_uint8 {

    uint8_t const * ptr;

    size_t len;

} slice_ref_uint8_t;

typedef struct Signature Signature_t;


#include <stdbool.h>

bool * address_verify (
    Address_t * const * address,
    slice_ref_uint8_t message,
    Signature_t * const * signature);

PrivateKey_t * private_key_new (void);

PrivateKey_t * private_key_from_seed_unchecked (
    slice_ref_uint8_t seed);

PrivateKey_t * private_key_from_string (
    char const * private_key);

char * private_key_to_string (
    PrivateKey_t * const * private_key);

ViewKey_t * private_key_to_view_key (
    PrivateKey_t * const * private_key);

Address_t * private_key_to_address (
    PrivateKey_t * const * private_key);

Signature_t * private_key_sign (
    PrivateKey_t * const * private_key,
    slice_ref_uint8_t message);

Signature_t * signature_sign (
    PrivateKey_t * const * private_key,
    slice_ref_uint8_t message);

bool * signature_verify (
    Signature_t * const * signature,
    Address_t * const * address,
    slice_ref_uint8_t message);

Signature_t * signature_from_string (
    char const * signature);

char * signature_to_string (
    Signature_t * const * signature);

ViewKey_t * view_key_from_private_key (
    PrivateKey_t * const * private_key);

ViewKey_t * view_key_from_string (
    char const * view_key);

char * view_key_to_string (
    ViewKey_t * const * view_key);

Address_t * view_key_to_address (
    ViewKey_t * const * view_key);

/** \brief
 *  Simplified for lighter documentation, but the actual impls
 *  range from `Tuple1` up to `Tuple6`.
 */
typedef struct Tuple2_bool_ptr_char_ptr {

    bool * _0;

    char * _1;

} Tuple2_bool_ptr_char_ptr_t;

Tuple2_bool_ptr_char_ptr_t view_key_decrypt (
    ViewKey_t * const * view_key,
    char const * ciphertext);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_ALEO_FFI_BINDINGS__ */
